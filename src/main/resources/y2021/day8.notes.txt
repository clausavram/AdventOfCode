   0:      1:      2:      3:      4:      5:      6:      7:      8:      9:
  aaaa    ....    aaaa    aaaa    ....    aaaa    aaaa    aaaa    aaaa    aaaa
 b    c  .    c  .    c  .    c  b    c  b    .  b    .  .    c  b    c  b    c
 b    c  .    c  .    c  .    c  b    c  b    .  b    .  .    c  b    c  b    c
  ....    ....    dddd    dddd    dddd    dddd    dddd    ....    dddd    dddd
 e    f  .    f  e    .  .    f  .    f  .    f  e    f  .    f  e    f  .    f
 e    f  .    f  e    .  .    f  .    f  .    f  e    f  .    f  e    f  .    f
  gggg    ....    gggg    gggg    ....    gggg    gggg    ....    gggg    gggg

digit | # of segments | real segment letters
  0   |       6       | abc efg
  1   |       2       |   cf
  2   |       5       | a cde g
  3   |       5       | a cd fg
  4   |       4       | bcd f
  5   |       5       | ab d fg
  6   |       6       | ab defg
  7   |       3       | a c  f
  8   |       7       | abcdefg
  9   |       6       | abcd fg

# of segments | digits
      2       | [1]
      3       | [7]
      4       | [4]
      5       | [2, 3, 5]
      6       | [0, 6, 9]
      7       | [8]

# High-level algorithm:
1. find mixed '1' (2 letters) and mixed '7' (3 letters) => real 'a' is deduced exactly
2. from mixed '4' & '9' and real 'a' => real 'g' is deduced exactly
3. from mixed '1' => real 'c' & 'f' have 2 candidates
4. identify mixed '3' (length=5, has real 'a' & 'g' + both real 'c's & 'f's candidates) and real 'a' & 'g' => real 'd' is deduced exactly
5. from mixed '4' and real 'd' and 'c' & 'f' => real 'b' is deduced
6. identify mixed '5' (length=5, has real 'a' & 'b' & 'd' & 'g') and subtract all known letters => real 'f' is deduced
7. from mixed '1' and real 'f' => real 'c' is deduced
   => all real letters deduced

# Step-by-step algorithm
  1. from len('1')=2 => '1' = ab
  2. from len('4')=4 => '4' = eafb
  3. from len('7')=3 => '7' = dab
  4. from 1. => [CF] = [ab]
  5. from 1. and 3. => A = d
  6. from len('9')=6 and 2. and 4. => '9' = cefabd
  7. from 4. and 6. => [AG] = [cd]
  8. from 7. and 5. => G = c
  9. from 8. and 5. and 4. and len('3')=5 => '3' = fbcad
 10. from 9. and 8. and 5. and 4. => D = f
 11. from 2. and 10. and 4. => B = e
 12. from len('5')=5 and 5. and 11. and 10. and 8. => '5' = cdfbe (cdf?e)
 13. from 12. and 5. and 11. and 10. and 8. => F = b
 14. from 13. and 4. => C = a
 15. from len('8')=7 => '8' = acedgfb
 16. from 15. and 14. and 13. and 11. and 10. and 8. and 5. => E = g

=> A=d, B=e, C=a, D=f, E=g, F=b, G=c
